def jobParameters

pipeline {
  agent any

  environment {
    ksFile = "local.ks"
    logFile = "local.log"
    pkgFile = "local.packages"
    SPIN = credentials("spin_user")
  }

  parameters {
    booleanParam(
      name: 'MIRROR',
      defaultValue: true,
      description:
        """
        Take packages from non-marked repository if can't find in marked one.
        Useful if build in marked repository could not be completed in full due to some limitations.
        """
    )
    booleanParam(
      name: 'GREEDY',
      defaultValue: true,
      description:
        """
        Greedy mode: get as much packages from marked repository as possible, and get rest from non-marked repository.
        Useful for massive builds: LTO enabling for whole project, massive sanitizing, compiler options experiments.
        """           
    )
    booleanParam(
      name: 'DEBUG',
      defaultValue: false,
      description:
        """
        Enable debug mode (temporaries will be saved). USE WITH CAUTION: produces lots of files.
        """
    )
    booleanParam(
      name: 'VERBOSE',
      defaultValue: false,
      description:
        """
        Enable verbose mode: Produces a lot of output, usually helps to identify the issue root cause
        if the tool doesn't work as intender.
        """
    )
    string(
      name: 'CACHEDIR',
      defaultValue: 'tmp',
      description:
        """
        Path to cache directory for the tool.
        """
    )
    string(
      name: 'OUTDIR',
      defaultValue: 'mic-output',
      description:
        """
        Output directory for MIC.
        """
    )
    string(
      name: 'JOBS_NUMBER',
      defaultValue: '8',
      description:
        """
        Number of parallel jobs.
        """
    )
    choice(
      name: 'ARCH',
      choices: 'armv7l\ni686',
      description: 'Specify repo architecture (in OBS/MIC notation).'
    )
    string(
      name: 'KICKSTART_FILE',
      defaultValue: 'http://10.113.136.32/download_trbs/snapshots/devel/san/5.0-unified-asan/san-tizen-5.0-unified-asan_20180802.2/images/standard/mobile-wayland-armv7l-tm1/san-tizen-5.0-unified-asan_20180802.2_mobile-wayland-armv7l-tm1.ks',
      description:
        """
        URL of kickstart file used as a template.
        """
    )
  }

  stages {
    stage('Prepare packages list') {
      steps {
          script {
              pkgURL = params.KICKSTART_FILE.replace('.ks','.packages')
              pkgTmp = "tmp.packages"
              sh """
              wget ${pkgURL} -O ${pkgTmp} --user ${SPIN_USR} --password ${SPIN_PSW}
              if [ ! -f ${pkgTmp} ]; then
                echo "Packages file not found!"
                exit -1
              else
                cat ${pkgTmp} | awk '{print \$1}' | sed -e 's|.${params.ARCH}||g' | sed -e 's|.noarch||g' | sort -n > ${pkgFile}
              fi
              """
          }
      }
    }
    stage('Job initialization') {
      steps {
        script {
          // Add job description
          Jenkins.instance.getItemByFullName(env.JOB_NAME).setDescription(
            """
            This job provides an interface to build partially sanitized images with combirepo tool.
            """
          )
          // jobParameters initialization
          jobParameters = currentBuild.rawBuild.getAction(ParametersAction)?.getParameters()
        }
        echo "jobParameters: ${jobParameters}"
      }
    }
    stage('Fetch repository') {
      steps {
        git (
          url: 'https://github.com/Samsung/combirepo.git',
          credentialsId: '0ba02e82-32b9-4d07-88f0-a6ba9c38e6c6',
          branch: 'jenkins'
        )
      }
    }
    stage('Build') {
      steps {
        sh """
        sudo apt-get install --yes yum python-igraph python-iniparse zlib1g-dev libxml2-dev mic createrepo python-pip qemu-user-static python-configparser python-all dh-make

        sudo ./setup.py build
        sudo ./setup.py install

        wget ${params.KICKSTART_FILE} -O ${ksFile} --user ${SPIN_USR} --password ${SPIN_PSW}
        if [ ! -f ${ksFile} ]; then
            echo "Kickstart file not found!"
            exit -1
        fi

        unified_repo=`cat ${ksFile} | grep 'repo --name=unified-standard --baseurl=' | egrep -o 'https?://[^ ]+'`
        unified_asan_repo=`cat ${ksFile} | grep 'repo --name=unified-standard-asan --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_repo=`cat ${ksFile} | grep 'repo --name=base-standard --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_asan_repo=`cat ${ksFile} | grep 'repo --name=base-standard-asan --baseurl=' | egrep -o 'https?://[^ ]+'`

        if ${params.MIRROR}; then mirror="--mirror"; else mirror=""; fi
        if ${params.GREEDY}; then greedy="--greedy"; else greedy=""; fi
        if ${params.DEBUG}; then debug="--debug"; else debug=""; fi
        if ${params.VERBOSE}; then verbose="--verbose"; else verbose=""; fi

        sudo rm -f ${logFile}
        mkdir -p ${params.OUTDIR}
        mkdir -p ${params.CACHEDIR}

        sudo combirepo -A ${params.ARCH} -k ${ksFile} --packages-file ${pkgFile} --user ${SPIN_USR} --password ${SPIN_PSW} -o ${OUTDIR} \
        -l ${logFile} --tmp-dir ${params.CACHEDIR} -j ${params.JOBS_NUMBER} \
        \${greedy} \${mirror} \${debug} \${verbose} \
        --regenerate-repodata --preferring-strategy big --skip-version-mismatch \
        -p terminfo-base-full,glibc-asan \
        unified-standard \${unified_repo} \${unified_asan_repo} \
        unified-standard-asan \${unified_repo} \${unified_asan_repo} \
        base-standard \${base_repo} \${base_asan_repo} \
        base-standard-asan \${base_repo} \${base_asan_repo}
        """
      }
    }
  }
  post {
    always {
        echo 'Test run completed!'
    }
    success {
        echo 'Successfully!'
    }
    failure {
        echo 'Failed!'
    }
    unstable {
        echo 'Run was marked as unstable!'
    }
    changed {
        echo 'State of the Pipeline has changed!'
    }
  }
}
