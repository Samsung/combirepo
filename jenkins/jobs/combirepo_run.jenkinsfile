def jobParameters

pipeline {
  agent any

  options {
    skipDefaultCheckout true
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
  }

  environment {
    ksFile = "local.ks"
    logFile = "local.log"
    pkgFile = "local.packages"
    OBS = credentials("${params.OBS_ACCOUNT_ID}")
  }

  parameters {
    booleanParam(
      name: 'MIRROR',
      defaultValue: true,
      description:
        """
        Take packages from non-marked repository if can't find in marked one.
        Useful if build in marked repository could not be completed in full due to some limitations.
        """
    )
    booleanParam(
      name: 'GREEDY',
      defaultValue: true,
      description:
        """
        Greedy mode: get as much packages from marked repository as possible, and get rest from non-marked repository.
        Useful for massive builds: LTO enabling for whole project, massive sanitizing, compiler options experiments.
        """           
    )
    booleanParam(
      name: 'DEBUG',
      defaultValue: false,
      description:
        """
        Enable debug mode (temporaries will be saved). USE WITH CAUTION: produces lots of files.
        """
    )
    booleanParam(
      name: 'VERBOSE',
      defaultValue: false,
      description:
        """
        Enable verbose mode: Produces a lot of output, usually helps to identify the issue root cause
        if the tool doesn't work as intender.
        """
    )
    string(
      name: 'OBS_ACCOUNT_ID',
      defaultValue: '',
      description:
        """
        Jenkins credentials ID of OBS account.
        """
    )
    string(
      name: 'GIT_ACCOUNT_ID',
      defaultValue: '',
      description:
        """
        Jenkins credentials ID of GIT account.
        """
    )
    string(
      name: 'CACHEDIR',
      defaultValue: 'tmp',
      description:
        """
        Path to cache directory for the tool.
        """
    )
    string(
      name: 'OUTDIR',
      defaultValue: 'mic-output',
      description:
        """
        Output directory for MIC.
        """
    )
    string(
      name: 'JOBS_NUMBER',
      defaultValue: '8',
      description:
        """
        Number of parallel jobs.
        """
    )
    choice(
      name: 'ARCH',
      choices: 'armv7l\ni686\nx86_64\naarch64',
      description: 'Specify repo architecture (in OBS/MIC notation).'
    )
    string(
      name: 'KICKSTART_FILE',
      defaultValue: '',
      description:
        """
        URL of kickstart file used as a template.
        """
    )
    text(
      name: 'FORWARD',
      defaultValue: '',
      description:
        """
        The list of packages that should be marked with all its
        forward dependencies.
        """
    )
    text(
      name: 'BACKWARD',
      defaultValue: '',
      description:
        """
        The list of packages that should be marked with all its
        backward dependencies (i. e. dependees).
        """
    )
    text(
      name: 'SINGLE',
      defaultValue: '',
      description:
        """
        The list of packages that should be marked.
        """
    )
    text(
      name: 'EXCLUDE',
      defaultValue: '',
      description:
        """
        The list of packages that should be excluded from the
        final list of marked packages.
        """
    )
    text(
      name: 'PREFERABLE',
      defaultValue: '',
      description:
        """
        The list of packages that should be prefered in case of
        "have choice" problem.
        """
    )
  }

  stages {
    stage('Clean and checkout') {
      steps {
        cleanWs()
        checkout scm
      }
    }
    stage('Prepare packages list') {
      steps {
        script {
            pkgURL = params.KICKSTART_FILE.replace('.ks','.packages')
            pkgTmp = "tmp.packages"
            sh """
            wget ${pkgURL} -O ${pkgTmp} --user ${OBS_USR} --password ${OBS_PSW}
            if [ ! -f ${pkgTmp} ]; then
              echo "Packages file not found!"
              exit 1
            else
              cat ${pkgTmp} | awk '{print \$1}' | sed -e 's|.${params.ARCH}||g' | sed -e 's|.noarch||g' | sort -n > ${pkgFile}
            fi
            """
        }
      }
    }
    stage('Job initialization') {
      steps {
        script {
          // Add job description
          currentBuild.rawBuild.project.description =
            """
            This job provides an interface to build partially sanitized images with combirepo tool.
            """
        }
      }
    }
    stage('Check parameters') {
      steps {
        script {
          def checkStr = { String param, String name ->
            if (param.isEmpty()) {
              println "Error: " + name + " is required!"
              return 1
            } else {
              return 0
            }
          }
          def checkPkgs = { String param, String name ->
            if (!param.isEmpty()) {
              pkgs = param.split(',')
              for (p in pkgs) {
                pkg = p.stripIndent()
                f = readFile(pkgFile)
                lines = f.readLines()
                flag = false
                for (l in lines) {
                  if (pkg.equals(l.stripIndent())) {
                    flag = true
                    break
                  }
                }
                if (!flag) {
                  println "Error: " + pkg + " is not found in the packages list!"
                  println "Error: " + name + " list is corrupted!"
                  return 1
                }
              }
            }
            return 0
          }
          if (checkStr(params.OBS_ACCOUNT_ID, "OBS_ACCOUNT_ID") ||
              checkStr(params.GIT_ACCOUNT_ID, "GIT_ACCOUNT_ID") ||
              checkStr(params.KICKSTART_FILE, "KICKSTART_FILE") ||
              checkPkgs(params.FORWARD, "FORWARD") ||
              checkPkgs(params.BACKWARD, "BACKWARD") ||
              checkPkgs(params.SINGLE, "SINGLE") ||
              checkPkgs(params.EXCLUDE, "EXCLUDE") ||
              checkPkgs(params.PREFERABLE, "PREFERABLE")) {
            println "Error: Parameters check failed!"
            sh "exit 1"
          }
        }
      }
    }
    stage('Fetch repository') {
      steps {
        git (
          url: 'https://github.com/Samsung/combirepo.git',
          credentialsId: "${params.GIT_ACCOUNT_ID}",
          branch: 'jenkins'
        )
      }
    }
    stage('Build') {
      steps {
        sh """
        sudo apt-get install --yes yum python-igraph python-iniparse zlib1g-dev libxml2-dev mic createrepo python-pip qemu-user-static python-configparser python-all dh-make

        sudo ./setup.py build
        sudo ./setup.py install

        wget ${params.KICKSTART_FILE} -O ${ksFile} --user ${OBS_USR} --password ${OBS_PSW}
        if [ ! -f ${ksFile} ]; then
            echo "Kickstart file not found!"
            exit 1
        fi

        unified_repo=`cat ${ksFile} | grep 'repo --name=unified-standard --baseurl=' | egrep -o 'https?://[^ ]+'`
        unified_asan_repo=`cat ${ksFile} | grep 'repo --name=unified-standard-asan --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_repo=`cat ${ksFile} | grep 'repo --name=base-standard --baseurl=' | egrep -o 'https?://[^ ]+'`
        base_asan_repo=`cat ${ksFile} | grep 'repo --name=base-standard-asan --baseurl=' | egrep -o 'https?://[^ ]+'`

        if ${params.MIRROR}; then mirror="--mirror"; else mirror=""; fi
        if ${params.GREEDY}; then greedy="--greedy"; else greedy=""; fi
        if ${params.DEBUG}; then debug="--debug"; else debug=""; fi
        if ${params.VERBOSE}; then verbose="--verbose"; else verbose=""; fi
        if [ ! -z ${params.FORWARD} ]; then forward="-f ${params.FORWARD}"; else forward=""; fi
        if [ ! -z ${params.BACKWARD} ]; then backward="-b ${params.BACKWARD}"; else backward=""; fi
        if [ ! -z ${params.SINGLE} ]; then single="-s ${params.SINGLE}"; else single=""; fi
        if [ ! -z ${params.EXCLUDE} ]; then exclude="-e ${params.EXCLUDE}"; else exclude=""; fi
        if [ ! -z ${params.PREFERABLE} ]; then preferable="-p ${params.PREFERABLE}"; else preferable=""; fi

        sudo rm -f ${logFile}
        mkdir -p ${params.OUTDIR}
        mkdir -p ${params.CACHEDIR}

        sudo combirepo -A ${params.ARCH} -k ${ksFile} --packages-file ${pkgFile} --user ${OBS_USR} --password ${OBS_PSW} -o ${OUTDIR} \
        -l ${logFile} --tmp-dir ${params.CACHEDIR} -j ${params.JOBS_NUMBER} \
        \${greedy} \${mirror} \${debug} \${verbose} \
        --regenerate-repodata --preferring-strategy big --skip-version-mismatch \
        \${forward} \${backward} \${single} \${exclude} \${preferable} \
        unified-standard \${unified_repo} \${unified_asan_repo} \
        unified-standard-asan \${unified_repo} \${unified_asan_repo} \
        base-standard \${base_repo} \${base_asan_repo} \
        base-standard-asan \${base_repo} \${base_asan_repo}
        """
      }
    }
  }
  post {
    always {
        echo 'Test run completed!'
    }
    success {
        echo 'Successfully!'
    }
    failure {
        echo 'Failed!'
    }
    unstable {
        echo 'Run was marked as unstable!'
    }
    changed {
        echo 'State of the Pipeline has changed!'
    }
  }
}
